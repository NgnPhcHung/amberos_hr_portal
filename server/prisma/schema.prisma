// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

model Users {
  id            Int            @id @default(autoincrement())
  hash          String?        @db.VarChar(255)
  username      String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  employeeId    Int?
  role          String         @default("employee")
  employee      Employee?      @relation("EmployeeToUsers", fields: [employeeId], references: [id], onDelete: SetNull)
  notifications Notification[]

  @@map("users")
}

model Employee {
  id                Int                 @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String              @unique
  position          String
  department        String
  hireDate          DateTime
  isArchived        Boolean             @default(false)
  Users             Users[]             @relation("EmployeeToUsers")
  Attendance        Attendance[]
  Payroll           Payroll[]
  PerformanceReview PerformanceReview[]
  LeaveRequest      LeaveRequest[]
  Document          Document[]
}

model Attendance {
  id         Int       @id @default(autoincrement())
  employeeId Int
  employee   Employee  @relation(fields: [employeeId], references: [id])
  date       DateTime
  status     String
  clockIn    DateTime?
  clockOut   DateTime?
}

model Payroll {
  id         Int      @id @default(autoincrement())
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  amount     Float
  date       DateTime
  deductions Float?
  bonuses    Float?
}

model PerformanceReview {
  id         Int      @id @default(autoincrement())
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  reviewDate DateTime
  rating     Int
  comments   String?
}

model LeaveRequest {
  id         Int      @id @default(autoincrement())
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  startDate  DateTime
  endDate    DateTime
  type       String
  status     String
  reason     String?
}

model Document {
  id         Int      @id @default(autoincrement())
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  fileName   String
  filePath   String
  uploadedAt DateTime
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Users    @relation(fields: [userId], references: [id])
  message   String
  createdAt DateTime
  read      Boolean  @default(false)
}
